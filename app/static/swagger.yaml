swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "Mechanic Shop API"
  version: "1.0.0"
host: "mechanic-shop-flask.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:

  #### CUSTOMERS ####

  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login Endpoint, (generates a token)"
      description: "Validates customer credentials, generates and returns a customer specific token"
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "adsfgsdfDFHDFHUYMDFT..."
              message: "Login Successful"
              status: "success"

  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/ register a new user"
      description: "Endpoint to create a new customer in our Mechanic Shop Database, emails must be unique"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new customer"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              email: "johndoe@email.com"
              phone: "1234567890"
              password: "jdoe123"

    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers"
      responses:
        200:
          description: "Retrieved Customers Successfully"
          schema:
            $ref: "#/definitions/AllCustomers"

    put:
      tags:
        - Customers
      summary: "Endpoint to update a customer"
      description: "Endpoint to update a customer, this is a token authenticated route, user must be logged in to update their account"        
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a customer"
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully Updated Customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "George Stevens"
              phone: "1234567890"
              email: "jsteves@email.com"
              password: "test123"
    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer"
      description: "Endpoint to delete a customer, Requires token authorization, User must be logged in to delete"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully deleted customer"
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "Successfully deleted customer <customer_id>"
    
  /customers/my-tickets:
      get:
        tags: 
          - Customers
        summary: "Endpoint to view a Customers Tickets"
        description: "Endpoint to view a list of a customers tickets, this requires token authorization."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Successfully retrieved customer tickets"
            schema:
              $ref: "#/definitions/CustomerTickets"
            examples:
              application/json:
                VIN: "111222333444555"
            customer_id: 1
            service_date: "2025-03-02"
            service_desc: "Changed Oil"
            mechanic:
              - id: 1
                name: John Wrench
                email: wrenchman@email.com
                phone: "1112223334"
                salary: 55000
            parts:
              - id: 1
                name: "Oil Filter"
                price: 10.99
                
  
  #### MECHANICS ####

  /mechanics:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to create a mechanic"
      description: " Endpoint to create a new mechanic in the mechanic shop database"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new mechanic"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: "John Wrench"
              email: "wrenchman@email.com"
              phone: "1234567890"
              salary: 55000

    get:
      tags:
        - Mechanics
      summary: "Returns all Mechanics"
      description: "Endpoint to retrieve a list of all Mechanics"
      responses:
        200:
          description: "Retrieved Mechanics Successfully"
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/{id}:
    put:
      tags:
        - Mechanics
      summary: "Endpoint to update a Mechanic"
      description: "Endpoint to update a Mechanic in the mechanic shop database"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Mechanic"
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Successfully Updated Mechanic"
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: "John Wrench"
              phone: "1234567890"
              email: "wrenchman@email.com"
              salary: 60000
    delete:
      tags:
        - Mechanics
      summary: "Delete a Mechanic"
      description: "Endpoint to delete a mechanic from the mechanic shop database"
      response:
        200:
          description: "Successfully deleted mechanic"
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"
          examples:
            application/json:
              message: "Successfully deleted mechanic <mechanic_id>"
 
  /mechanics/experience:
    get:
      tags:
        - Mechanics
      summary: "Returns Most Experienced Mechanics"
      description: "Endpoint to retrieve a list of the Mechanics with the most amount of experience"
      responses:
        200:
          description: "Retrieved Sorted Mechanics Successfully"
          schema:
            $ref: "#/definitions/ExperiencedMechanics"

  #### INVENTORY ####

  /inventory:
    post:
      tags:
        - Inventory
      summary: "Endpoint to create a part"
      description: " Endpoint to create a new part in the mechanic shop database"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new part"
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        201:
          description: "Successful Part Creation"
          schema:
            $ref: "#/definitions/CreateInventoryResponse"
          examples:
            application/json:
              id: 1
              name: "Brake Pad"
              price: 22.99

    get:
      tags:
        - Inventory
      summary: "Returns all Inventory"
      description: "Endpoint to retrieve a list of all Inventory"
      responses:
        200:
          description: "Retrieved Inventory Successfully"
          schema:
            $ref: "#/definitions/AllInventory"

  /inventory/{id}:
    put:
      tags:
        - Inventory
      summary: "Endpoint to update a Part"
      description: "Endpoint to update a Part in the mechanic shop database"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Part"
          required: true
          schema:
            $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: "Successfully Updated Part"
          schema:
            $ref: "#/definitions/UpdateInventoryResponse"
          examples:
            application/json:
              id: 1
              name: "Brake Pad"
              price: 19.50
    delete:
      tags:
        - Inventory
      summary: "Delete a Part"
      description: "Endpoint to delete a part from the mechanic shop database"
      response:
        200:
          description: "Successfully deleted part"
          schema:
            $ref: "#/definitions/DeleteInventoryResponse"
          examples:
            application/json:
              message: "Successfully deleted part <part_id>"
 
  #### SERVICE-TICKETS ####

  /tickets:
    post:
      tags:
        - Tickets
      summary: "Create a service ticket"
      description: "Endpoint for creating a service ticket in the mechanic shop database"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new ticket"
          required: true
          schema:
            $ref: "#/definitions/CreateTicketPayload"
      responses:
        201:
          description: "Successful Ticket Creation"
          schema:
            $ref: "#/definitions/CreateTicketResponse"
          examples:
            application/json:
              VIN: "111222333444555"
              customer_id: 1
              service_date: "2025-03-02"
              service_desc: "Changed Oil"
              mechanic:
                - id: 1
                  name: John Wrench
                  email: wrenchman@email.com
                  phone: "1112223334"
                  salary: 55000
              parts: []
    
    get:
      tags:
        - Tickets
      summary: "Endpoint to get all tickets"
      description: "Endpoint to gather all service tickets from the mechanic shop database"
      responses:
        200:
          description: "Retrieved Tickets Successfully"
          schema:
            $ref: "#/definitions/AllTickets"
 
  /tickets/{id}/edit:
    put:
      tags:
        - Tickets
      summary: "Add and/or Remove Mechanics from Ticket"
      description: "Endpoint for adding and/or removing mechanics from a service ticket"
      parameters:
        - in: "body"
          name: "body"
          description: "Ids to add or remove from Ticket"
          required: true
          schema:
            $ref: "#/definitions/EditTicketPayload"
      responses:
        200: 
          description: "Successful Ticket Update"
          schema:
            $ref: "#/definitions/EditTicketResponse"
  
  /tickets/{id}/add-part:
    put:
      tags:
        - Tickets
      summary: "Add a Part to a Service Ticket"
      description: "Endpoint for adding a part to a service ticket from a service ticket"
      parameters:
        - in: "body"
          name: "body"
          description: "Part IDs to add to Ticket"
          required: true
          schema:
            $ref: "#/definitions/AddPartTicketPayload"
      responses:
        200: 
          description: "Part(s) successfully added to Ticket"
          schema:
            $ref: "#/definitions/AddPartTicketResponse"
  

definitions:

  #### CUSTOMERS ####

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password
  
  CreateCustomerResponse:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

    required:
      - name
      - email
      - phone
      - password
    
  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CustomerTickets:
    type: "array"
    items:
      type: "object"
      properties:
        VIN:
          type: "string"
        customer_id:
          type: "integer"
        service_date:
          type: "string"
          format: date
        service_desc:
          type: "string"
        mechanic:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              email:
                type: "string"
              phone:
                type: "string"
              salary:
                type: "number"
                format: "float"
        parts:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              price:
                type: "number"
                format: "float"


  #### MECHANICS #####

  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
    required:
      - name
      - email
      - phone
      - salary
  
  CreateMechanicResponse:
    type: "object"
    properties:
      id: 
        type: "integer"
      name: 
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"

  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"

  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

    required:
      - name
      - email
      - phone
      - salary
    
  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"

  DeleteMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"

  ExperiencedMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"

  #### INVENTORY #####

  CreateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

    required:
      - name
      - price
  
  CreateInventoryResponse:
    type: "object"
    properties:
      id: 
        type: "integer"
      name: 
        type: "string"
      price:
        type: "number"

  AllInventory:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"

  UpdateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

    required:
      - name
      - price
  
  UpdateInventoryResponse:
    type: "object"
    properties:
      id: 
        type: "integer"
      name: 
        type: "string"
      price:
        type: "number"
  
  DeleteInventoryResponse:
    type: "object"
    properties:
      message:
        type: "string"

  #### SERVICE-TICKETS ####

  CreateTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: date
      service_desc:
        type: "string"
      customer_id:
        type: "integer"
      mechanic_ids:
        type: "array"
        items:
          type: "integer"

    required:
      - VIN
      - service_date
      - service_desc
      - customer_id
      - mechanic_ids
  
  CreateTicketResponse:
    type: "object"
    properties:
      VIN:
        type: "string"
      customer_id:
        type: "integer"
      service_date:
        type: "string"
        format: date
      service_desc:
        type: "string"
      mechanic:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            email:
              type: "string"
            phone:
              type: "string"
            salary:
              type: "number"
              format: "float"
      parts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            price:
              type: "number"
              format: "float"
  
  AllTickets:
    type: "array"
    items:
      type: "object"
      properties:
        VIN:
          type: "string"
        customer_id:
          type: "integer"
        service_date:
          type: "string"
          format: date
        service_desc:
          type: "string"
        mechanic:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              email:
                type: "string"
              phone:
                type: "string"
              salary:
                type: "number"
                format: "float"
        parts:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              price:
                type: "number"
                format: "float"
  
  EditTicketPayload:
    type: "object"
    properties: 
      add_ids:
        type: "array"
        items:
          type: "integer"
      remove_ids:
        type: "array"
        items:
          type: "integer"
    
    required:
      - add_ids
      - remove_ids
  
  EditTicketResponse:
    type: "object"
    properties:
      VIN:
        type: "string"
      customer_id:
        type: "integer"
      service_date:
        type: "string"
        format: date
      service_desc:
        type: "string"
      mechanic:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            email:
              type: "string"
            phone:
              type: "string"
            salary:
              type: "number"
              format: "float"
      parts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            price:
              type: "number"
              format: "float"

  AddPartTicketPayload:
    type: "object"
    properties:
      add_ids:
        type: "array"
        items:
          type: "integer"
    
    required:
      - add_ids
  
  AddPartTicketResponse:
    type: "object"
    properties:
      VIN:
        type: "string"
      customer_id:
        type: "integer"
      service_date:
        type: "string"
        format: date
      service_desc:
        type: "string"
      mechanic:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            email:
              type: "string"
            phone:
              type: "string"
            salary:
              type: "number"
              format: "float"
      parts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            price:
              type: "number"
              format: "float"